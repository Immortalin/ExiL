(in-package :env-tests)

(declaim (optimize (debug 3) (compilation-speed 0) (space 0) (speed 0)))

;; (def-test-method undo-step ((tests undo-tests) :run nil)
;;   (with-slots (env) tests
;;     (let* ((template (make-template :tmpl '(a b)))
;; 	   (fact (make-simple-fact '(fact)))
;; 	   (rule (make-rule :rule `(,fact) '((almost-completely-reset-env env))))
;; 	   env1 env2)
;;       (set-watcher env :facts)
;;       (add-template env template)
;;       (add-fact env fact)
;;       (add-fact-group env :fg `(,fact))
;;       (add-strategy env :test-strat #'+)
;;       (set-strategy env :breadth-strategy)
;;       (add-rule env rule)
;;       (setf env1 (copy-env env))
;;       (assert-equal (length (activations env)) 1)
;;       (activate-rule (select-activation env))
;;       (setf env2 (copy-env env))
;;       (undo env)
;;       (assert-true (env-equal-p env env1))
;;       (redo env)
;;       (assert-true (env-equal-p env env2)))))
