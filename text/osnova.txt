Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-12-10T19:45:26

==== Osnova ====
1) teoretická část I (8-12) - expertní systémy - čerpá z Jacksona
  * úvod - definice (znalosti, expertíza), vlastnosti, odlišnosti, typické aplikace
  * přehled AI - co směřovalo k pojmu expertního systému
    * prohledávání prostoru stavů (state space search), dokazování teorémů, heuristiky
    * odvozovací pravidla
    * oddělení znalostní baze od odvozovacího aparátu
  * reprezentace znalostí
    * vlastnosti, kritéria
    * definice - reprezentace, syntax, sémantika, problém
  * systémy založené na pravidlech
    * fakta, pravidla (podmínky, důsledky)
    * znalostní báze (výchozí stav, primárně pravidla)
      X working memory (aktuální stav, primárně fakta, i když u učícího se systému
        by mohla přibývat i pravidla)
    * dopředné a zpětné řetězení (a generování vs. přijímání odpovědí)
    * historické aplikace
      * STRIPS
        - stav, operace, cíle
        - jednoduchá reprezentace (preconditions (conj), add list, remove list),
        - zpětné řetězení (means-end analysis)
        - pattern matching, substituce, výběr cíle, pravidla k aplikaci
      * MYCIN
        - neurčitost, vážená pravidla
        - volnější reprezentace (podmínky i disjunkce,
          akce pravidel nejen závěry (fakta), ale i instrukce)
        - meta-pravidla
        -> složitější inference
      * limitace uvedených systémů
      * CLIPS
        - obecný - nezávislý na problémové doméně
        - dopředné řetězení
        - struktura programu - základní direktivy
        - spuštění a řízení inference - agenda, ukončení, strategie (nedeterminismus)
  * symbolické výpočty
    * reprezentace stavu pomocí symbolických struktur, inference jako jejich manipulace
    * stavební kameny - symboly, množiny, n-tice, vektory
    * výhody (a nevýhody) LISPu pro symbolické výpočty
    * základní přehled lispu - pravděpodobně jen odkaz na materiály a vyjmenování
      pojmů potřebných pro pochopení implementace
2) praktická část
* dokumentace ExiLu (5-10) + příklady
  * stručná uživatelská příručka
  * referenční příručka
    * aktivace pravidel jsou vyhodnocovány -> mohou používat lispové funkce
      - uvést příklady - např. pravidla snadno mohou agregovat nejistotu (Jackson, 81)
    * ukončení inference - buď zajistit, že nebude splněno žádné pravidlo (např. odstranit
      goal, pokud je explicitní), nebo explicitně volat halt
* implementace (5-8)
  * architektura
  * použité nástroje - iterate, xlunit (TDD)
  * použité algoritmy - RETE - převzít z bakalářky
  * zajímavosti, problémy (např. kopie rete - graf s cykly)
    * implementace undo/redo - ulozeni hodnot slotu v closure a obnoveni
      * dynamicke volani copy-'slot', kopie rete - pruchod grafem s cykly
        * velmi obecna funkce vyssiho radu
    * package, komponenty, cyklické závislosti
      * rete <-> env (as observer - not possible with packages)
      * parser <-> env (in backward chaining, because env analyzes rule's activations,
          which is probably a bad idea)
  * PoAIP - kap 4. - zpětné řetězení, kap. 5 - pattern matching (5.2,5.3)
* jednotlivé části zadání (5)
  * CLIPS kompatibilita
  * GUI
  * undo/redo
  * zpětné řetězení
    * zdokumentovat to, že aplikace pravidel se tiskne odzadu (v opačném pořadí, než je
      třeba akce vykonat) - viz notes.txt
    * příklady z kap. 4 Paradigms of AI programming, omezení
3) teoretická část II (odkazy na praktickou část) (4-6)
* LISP
  * výhody
    * syntax - S-výrazy, manipulace symbolické reprezentace, makra
    * dynamický
    * umožňuje funkcionální přístup
      * všechny core objekty jsou immutable - např. (modify fact) vrací nový fakt
        - snadná implementace kopie prostředí - není třeba kopírovat immutable objekty
  * nevýhody
    * LISP a OOP
      * package (misto public/private)
      * metody jako generiky, kongruence lambda-listů
      * standardní funkce nejsou generiky - nejdou přetížit
* top-down X bottom-up přístup
* TDD - vyhody, uskali, misuse, typy testu
4) výsledky (1-2)
  * co bylo implementováno
  * co by šlo rozšířit
    * patterny jako v CLIPSu - (color box ?or~red~green)
    * pattern matching pracuje jen na prvni urovni seznamu (simple) nebo primo s hodnotami
      slotu (template), nevnoruje se - nebylo by tezke dodelat - PoAIP kap. 5.2,5.3
    * další strategie (conflict resolution) - Jackson, 86, rule salience (váha)
      * zpětné řetězení nepoužívá strategie výběru matchů vůbec (pouze pořadí)
      * možnost uživatelsky definovat strategie není příliš přínosná, pokud
        uživatel potřebuje používat privátní funkce pro práci s matchi a pravidly
    * zpětné řetězení je velmi omezené
    * vyhodnocení aktivací pravidla v lokálním kontextu - problém s evalem
      * aktivace by musely být uloženy jako funkce s bindingy jako parametry
    * objekty jako fakta, dědičnost
    * nejistota - důvěryhodnost faktů, pravidel, vážené cíle
    * metapravidla?
    * výkon
